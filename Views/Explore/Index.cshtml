@model SkillBridge.Models.ExploreViewModel
@using SkillBridge.Models
@using Microsoft.AspNet.Identity

@{
    ViewBag.Title = "Explore";

    var db = new ApplicationDbContext();
    var currentUserId = User.Identity.GetUserId();

    var userLearningSkills = db.UserSkills
        .Where(us => us.UserId == currentUserId && us.Status == "Learning")
        .Select(us => us.Skill.Name)
        .Distinct()
        .ToList();

    var allDivisions = new List<string>
{
        "Dhaka", "Chattogram", "Khulna", "Barishal", "Sylhet", "Mymensingh", "Rajshahi", "Rangpur"
    }.OrderBy(d => d).ToList();

    Func<double, string> getRatingClass = rating =>
    {
        if (rating >= 8) return "rating-deepblue";
        if (rating >= 6.5) return "rating-green";
        if (rating >= 4) return "rating-yellow";
        return "rating-red";
    };
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --accent-color: #4cc9f0;
            --success-color: #4ade80;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --light-bg: #f8fafc;
            --card-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            --card-shadow-hover: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
            --border-radius: 12px;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .explore-container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 15px;
        }

        .page-header {
            text-align: center;
            margin-bottom: 3rem;
            position: relative;
        }

        .page-title {
            font-weight: 800;
            font-size: 2.5rem;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
        }

        .page-subtitle {
            color: #64748b;
            font-size: 1.1rem;
            max-width: 600px;
            margin: 0 auto;
        }

        .filter-section {
            background: white;
            border-radius: var(--border-radius);
            padding: 1.5rem;
            margin-bottom: 2.5rem;
            box-shadow: var(--card-shadow);
            border: 1px solid #e2e8f0;
        }

        .filter-title {
            font-weight: 600;
            margin-bottom: 1rem;
            color: #334155;
            display: flex;
            align-items: center;
        }

        .filter-title i {
            margin-right: 10px;
            color: var(--primary-color);
        }

        .filter-row {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .filter-group {
            flex: 1;
            min-width: 200px;
        }

        .form-select-modern {
            border-radius: 8px;
            border: 1px solid #e2e8f0;
            padding: 0.75rem;
            font-size: 0.95rem;
            transition: var(--transition);
            background-color: #f8fafc;
        }

        .form-select-modern:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

        .section-title {
            font-weight: 700;
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            color: #1e293b;
            display: flex;
            align-items: center;
            position: relative;
            padding-bottom: 0.5rem;
        }

        .section-title:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 50px;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
            border-radius: 3px;
        }

        .section-title i {
            margin-right: 10px;
            color: var(--primary-color);
        }

        .matches-container {
            margin-bottom: 3rem;
        }

        .person-card {
            transition: var(--transition);
            margin-bottom: 1.5rem;
        }

        .person-card:hover {
            transform: translateY(-5px);
        }

        .card-modern {
            border: none;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--card-shadow);
            transition: var(--transition);
            height: 100%;
            background: white;
        }

        .card-modern:hover {
            box-shadow: var(--card-shadow-hover);
        }

        .card-link {
            text-decoration: none;
            color: inherit;
        }

        .card-link:hover {
            color: inherit;
        }

        .card-body-modern {
            padding: 1.5rem;
        }

        .user-info {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }

        .avatar-container {
            position: relative;
            margin-right: 1rem;
        }

        .avatar {
            width: 70px;
            height: 70px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #e2e8f0;
            transition: var(--transition);
        }

        .person-card:hover .avatar {
            border-color: var(--primary-color);
        }

        .user-details {
            flex: 1;
        }

        .user-name {
            font-weight: 600;
            margin-bottom: 0.25rem;
            color: #1e293b;
        }

        .user-location {
            color: #64748b;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
        }

        .user-location i {
            margin-right: 5px;
            font-size: 0.8rem;
        }

        .rating-container {
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8fafc;
            border-radius: 20px;
            padding: 0.5rem 0.75rem;
        }

        .rating-badge {
            font-weight: 700;
            font-size: 0.9rem;
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
            color: white;
        }

        .rating-deepblue {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        }

        .rating-green {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .rating-yellow {
            background: linear-gradient(135deg, #f59e0b, #d97706);
        }

        .rating-red {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        .skills-section {
            margin-top: 1rem;
        }

        .skills-title {
            font-weight: 600;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
            color: #475569;
            display: flex;
            align-items: center;
        }

        .skills-title i {
            margin-right: 5px;
            font-size: 0.8rem;
        }

        .skills-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .skill-badge {
            background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
            color: #475569;
            border-radius: 20px;
            padding: 0.35rem 0.75rem;
            font-size: 0.8rem;
            font-weight: 500;
            border: 1px solid #e2e8f0;
            transition: var(--transition);
        }

        .skill-badge:hover {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            transform: scale(1.05);
        }

        .no-results {
            text-align: center;
            padding: 3rem 1rem;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
        }

        .no-results i {
            font-size: 4rem;
            color: #cbd5e1;
            margin-bottom: 1rem;
        }

        .no-results h4 {
            color: #64748b;
            margin-bottom: 0.5rem;
        }

        .no-results p {
            color: #94a3b8;
        }

        .best-match-badge {
            position: absolute;
            top: -10px;
            right: 15px;
            background: linear-gradient(135deg, var(--warning-color), #ea580c);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            z-index: 10;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        
    </style>
</head>


<body>
    <div class="explore-container">
        <!-- Page Header -->
        @*<div class="page-header">
            <h1 class="page-title">Explore SkillBridge</h1>
        </div>*@

        <!-- Filters Section -->
        <div class="filter-section">
            <h3 class="filter-title"><i class="fas fa-filter"></i>Filter Results</h3>
            <div class="filter-row">
                <div class="filter-group">
                    <label class="form-label fw-semibold">Skill I'm Learning</label>
                    <select id="skillFilter" class="form-select form-select-modern">
                        <option value="">All Skills</option>
                        @foreach (var skill in userLearningSkills)
                        {
                            <option>@skill</option>
                        }
                    </select>
                </div>

                <div class="filter-group">
                    <label class="form-label fw-semibold">Minimum Skill Phase</label>
                    <select id="phaseFilter" class="form-select form-select-modern">
                        <option value="">Any Phase</option>
                        @for (int i = 1; i <= 7; i++)
                        {
                            <option>@i</option>
                        }
                    </select>
                </div>

                <div class="filter-group">
                    <label class="form-label fw-semibold">Location</label>
                    <select id="locationFilter" class="form-select form-select-modern">
                        <option value="">All Locations</option>
                        @foreach (var loc in allDivisions)
                        {
                            <option>@loc</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Best Matches Section -->
        @if (Model.BestMatches.Any())
        {
            <div class="matches-container">
                <h3 class="section-title"><i class="fas fa-fire"></i>Best Matches</h3>
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="bestMatches">
                    @foreach (var person in Model.BestMatches)
                    {
                        <div class="col person-card"
                             data-offers="@string.Join(",", person.SkillsToTeach.Select(s => s.SkillName))"
                             data-location="@person.Location"
                             data-maxstage="@person.SkillsToTeach.Max(s => s.Stage)">
                            <a href="@Url.Action("PublicProfile", "Profile", new { id = person.UserId })" class="card-link">
                                <div class="card card-modern h-100 position-relative">
                                    <div class="card-body-modern">
                                        <div class="user-info">
                                            <div class="avatar-container">
                                                <img src="@Url.Content(person.ProfileImageUrl)" class="avatar" alt="@person.FullName" />
                                            </div>
                                            <div class="user-details">
                                                <h5 class="user-name">@person.FullName</h5>
                                                <div class="user-location">
                                                    <i class="fas fa-map-marker-alt"></i>@person.Location
                                                </div>
                                            </div>
                                            <div class="rating-container">
                                                <div class="rating-badge @getRatingClass(person.AverageRating)">
                                                    @person.AverageRating.ToString("0.0")
                                                </div>
                                            </div>
                                        </div>

                                        <div class="skills-section">
                                            <div class="mb-3">
                                                <div class="skills-title">
                                                    <i class="fas fa-gift"></i>Offers to Teach
                                                </div>
                                                <div class="skills-container">
                                                    @foreach (var skill in person.SkillsToTeach)
                                                    {
                                                        <span class="skill-badge">@skill.SkillName</span>
                                                    }
                                                </div>
                                            </div>

                                            <div>
                                                <div class="skills-title">
                                                    <i class="fas fa-search"></i>Wants to Learn
                                                </div>
                                                <div class="skills-container">
                                                    @foreach (var skill in person.SkillsToLearn)
                                                    {
                                                        <span class="skill-badge">@skill.SkillName</span>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="matches-container">
                <div class="no-results">
                    <i class="fas fa-users"></i>
                    <h4>No Match Results Found</h4>
                    <p>Try adjusting your filters to see more results</p>
                </div>
            </div>
        }

        <!-- Partial Matches Section -->
        @if (Model.PartialMatches.Any())
        {
            <div class="matches-container">
                <h3 class="section-title"><i class="fas fa-user-friends"></i>Partial Matches</h3>
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4" id="partialMatches">
                    @foreach (var person in Model.PartialMatches)
                    {
                        <div class="col person-card"
                             data-offers="@string.Join(",", person.SkillsToTeach.Select(s => s.SkillName))"
                             data-location="@person.Location"
                             data-maxstage="@person.SkillsToTeach.Max(s => s.Stage)">
                            <a href="@Url.Action("PublicProfile", "Profile", new { id = person.UserId })" class="card-link">
                                <div class="card card-modern h-100">
                                    <div class="card-body-modern">
                                        <div class="user-info">
                                            <div class="avatar-container">
                                                <img src="@Url.Content(person.ProfileImageUrl)" class="avatar" alt="@person.FullName" />
                                            </div>
                                            <div class="user-details">
                                                <h5 class="user-name">@person.FullName</h5>
                                                <div class="user-location">
                                                    <i class="fas fa-map-marker-alt"></i>@person.Location
                                                </div>
                                            </div>
                                            <div class="rating-container">
                                                <div class="rating-badge @getRatingClass(person.AverageRating)">
                                                    @person.AverageRating.ToString("0.0")
                                                </div>
                                            </div>
                                        </div>

                                        <div class="skills-section">
                                            <div>
                                                <div class="skills-title">
                                                    <i class="fas fa-gift"></i>Offers to Teach
                                                </div>
                                                <div class="skills-container">
                                                    @foreach (var skill in person.SkillsToTeach)
                                                    {
                                                        <span class="skill-badge">@skill.SkillName</span>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="matches-container">
                <div class="no-results">
                    <i class="fas fa-user-friends"></i>
                    <h4>No Match Results Found</h4>
                    <p>Try adjusting your filters to see more results</p>
                </div>
            </div>
        }

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
        <script>
            function applyFilters() {
                var selectedSkill = document.getElementById("skillFilter").value;
                var selectedPhase = parseInt(document.getElementById("phaseFilter").value) || 0;
                var selectedLocation = document.getElementById("locationFilter").value;

                var hasVisibleBestMatches = false;
                var hasVisiblePartialMatches = false;

                document.querySelectorAll("#bestMatches .person-card").forEach(function (card) {
                    var offers = card.getAttribute("data-offers").split(",");
                    var location = card.getAttribute("data-location");
                    var maxStage = parseInt(card.getAttribute("data-maxstage")) || 0;

                    var skillMatch = (selectedSkill === "" || offers.includes(selectedSkill));
                    var phaseMatch = (selectedPhase === 0 || maxStage >= selectedPhase);
                    var locationMatch = (selectedLocation === "" || location === selectedLocation);

                    if (skillMatch && phaseMatch && locationMatch) {
                        card.style.display = "";
                        hasVisibleBestMatches = true;
                    } else {
                        card.style.display = "none";
                    }
                });

                document.querySelectorAll("#partialMatches .person-card").forEach(function (card) {
                    var offers = card.getAttribute("data-offers").split(",");
                    var location = card.getAttribute("data-location");
                    var maxStage = parseInt(card.getAttribute("data-maxstage")) || 0;

                    var skillMatch = (selectedSkill === "" || offers.includes(selectedSkill));
                    var phaseMatch = (selectedPhase === 0 || maxStage >= selectedPhase);
                    var locationMatch = (selectedLocation === "" || location === selectedLocation);

                    if (skillMatch && phaseMatch && locationMatch) {
                        card.style.display = "";
                        hasVisiblePartialMatches = true;
                    } else {
                        card.style.display = "none";
                    }
                });

                toggleNoResultsMessage('bestMatches', hasVisibleBestMatches);
                toggleNoResultsMessage('partialMatches', hasVisiblePartialMatches);

                showCombinedNoResultsMessage(!hasVisibleBestMatches && !hasVisiblePartialMatches);
            }

            function toggleNoResultsMessage(sectionId, hasVisibleItems) {
                var section = document.getElementById(sectionId);
                if (section) {
                    var container = section.closest('.matches-container');
                    var header = container.querySelector('.section-title');
                    var noResults = container.querySelector('.no-results');

                    if (hasVisibleItems) {
                        if (header) header.style.display = '';
                        if (noResults) noResults.style.display = 'none';
                        section.style.display = '';
                    } else {
                        if (header) header.style.display = 'none';
                        if (noResults) noResults.style.display = 'block';
                        section.style.display = 'none';
                    }
                }
            }

            function showCombinedNoResultsMessage(show) {
                var existingMessage = document.getElementById('combinedNoResults');
                if (existingMessage) {
                    existingMessage.remove();
                }

                if (show) {
                    var combinedMessage = document.createElement('div');
                    combinedMessage.id = 'combinedNoResults';
                    combinedMessage.className = 'matches-container';
                    combinedMessage.innerHTML = `
            <div class="no-results">
                <i class="fas fa-search"></i>
                <h4>No matches found with current filters</h4>
                <p>Try adjusting your filters or search criteria to see more results</p>
            </div>
        `;

                    var filterSection = document.querySelector('.filter-section');
                    filterSection.parentNode.insertBefore(combinedMessage, filterSection.nextSibling);

                    document.querySelectorAll('.matches-container').forEach(function (container) {
                        if (container.id !== 'combinedNoResults') {
                            container.style.display = 'none';
                        }
                    });
                } else {
                    document.querySelectorAll('.matches-container').forEach(function (container) {
                        container.style.display = '';
                    });
                }
            }

            document.getElementById("skillFilter").addEventListener("change", applyFilters);
            document.getElementById("phaseFilter").addEventListener("change", applyFilters);
            document.getElementById("locationFilter").addEventListener("change", applyFilters);

            document.addEventListener('DOMContentLoaded', function () {
                applyFilters();
            });
        </script>
</body>
</html>