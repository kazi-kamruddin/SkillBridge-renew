@model SkillBridge.Models.InteractionFeedbackViewModel

<h3>You completed an interaction with @Model.RatingModel.FromUserName</h3>

<p>You learned: <strong>@Model.IndexModel.SkillYouLearn</strong></p>
<p>You taught: <strong>@Model.IndexModel.SkillYouTeach</strong></p>

<form id="rating-form">
    @Html.AntiForgeryToken()

    @Html.Hidden("InteractionId", Model.RatingModel.InteractionId)
    @Html.Hidden("ToUserId", Model.RatingModel.ToUserId)

    <div class="form-group">
        <label for="RatingValue">Rating (1-10):</label>
        <input type="number" class="form-control" id="RatingValue" name="RatingValue" min="1" max="10" required />
    </div>

    <div class="form-group">
        <label for="Comment">Comment (optional):</label>
        <textarea class="form-control" id="Comment" name="Comment" maxlength="250"></textarea>
    </div>

    <button type="submit" class="btn btn-primary">Submit Rating</button>
</form>

<div id="rating-result" class="mt-2"></div>

<style>
    /* Container */
    #rating-form {
        max-width: 500px;
        margin: 30px auto;
        padding: 30px;
        background: #ffffff;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        font-family: "Segoe UI", system-ui, sans-serif;
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

    #rating-form h3 {
        font-size: 1.4rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 25px;
        color: #1a1a1a;
        background: linear-gradient(135deg, #3b82f6, #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        padding-bottom: 10px;
        border-bottom: 2px solid #f0f4ff;
    }

    /* Form groups */
    .form-group {
        margin-bottom: 25px;
        position: relative;
    }

    /* Labels */
    #rating-form label {
        font-weight: 600;
        margin-bottom: 8px;
        display: block;
        color: #374151;
        font-size: 0.95rem;
        letter-spacing: 0.3px;
    }

    /* Inputs & Textarea */
    #rating-form input[type="number"],
    #rating-form textarea {
        width: 100%;
        border: 2px solid #e5e7eb;
        border-radius: 12px;
        padding: 14px 16px;
        font-size: 1rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        background: #fafbfc;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
    }

    #rating-form input[type="number"]:focus,
    #rating-form textarea:focus {
        border-color: #3b82f6;
        background: #ffffff;
        outline: none;
        box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1), inset 0 1px 3px rgba(0, 0, 0, 0.05);
        transform: translateY(-1px);
    }

    #rating-form textarea {
        min-height: 100px;
        resize: vertical;
        line-height: 1.5;
    }

    /* Button */
    #rating-form button {
        width: 100%;
        padding: 14px;
        border: none;
        border-radius: 14px;
        font-size: 1.05rem;
        font-weight: 600;
        cursor: pointer;
        background: linear-gradient(135deg, #3b82f6, #2563eb);
        color: white;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    #rating-form button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(59, 130, 246, 0.4);
        background: linear-gradient(135deg, #2563eb, #1d4ed8);
    }

    #rating-form button:active {
        transform: translateY(0);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    #rating-form button::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        transition: width 0.3s, height 0.3s, top 0.3s, left 0.3s;
    }

    #rating-form button:active::after {
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        border-radius: 14px;
    }

    /* Result box */
    #rating-result {
        margin-top: 20px;
        padding: 16px;
        border-radius: 12px;
        text-align: center;
        font-weight: 500;
        display: none;
        animation: fadeIn 0.4s ease-out;
        border-left: 4px solid;
    }

    

    #rating-result.success {
        background: #f0fdf4;
        color: #166534;
        border-left-color: #10b981;
    }

    #rating-result.error {
        background: #fef2f2;
        color: #991b1b;
        border-left-color: #ef4444;
    }

    /* Text elements */
    #rating-form p {
        margin-bottom: 15px;
        padding: 12px 15px;
        background: #f8fafc;
        border-radius: 10px;
        border-left: 4px solid #3b82f6;
        font-size: 0.95rem;
        color: #4b5563;
    }

    #rating-form strong {
        color: #1e40af;
        font-weight: 700;
    }

</style>

@section scripts {
    <script>
$(function () {
    $("#rating-form").submit(function (e) {
        e.preventDefault();
        var form = $(this);

        $.ajax({
            url: "@Url.Action("SubmitRating","Interactions")",
            type: "POST",
            data: form.serialize(), // token @Html.AntiForgeryToken()
            success: function (response) {
                if (response && response.success) {
                    $("#rating-result").html("<span class='text-success'>Rating submitted successfully!</span>");
                    setTimeout(function () {
                        window.location.href = "@Url.Action("Index","Notifications")";
                    }, 900);
                    return;
                }

                var messages = [];

                if (response) {
                    if (response.errors) {
                        if (Array.isArray(response.errors)) {
                            if (response.errors.length && typeof response.errors[0] === "string") {
                                messages = response.errors;
                            } else {
                                messages = response.errors.map(function (e) { return e.ErrorMessage || e; });
                            }
                        } else if (typeof response.errors === "string") {
                            messages = [response.errors];
                        }
                    }
                    if (messages.length === 0 && response.message) {
                        messages = [response.message];
                    }
                }

                if (messages.length === 0) messages = ["An error occurred."];

                $("#rating-result").html("<span class='text-danger'>" + messages.join("<br>") + "</span>");
            },
            error: function () {
                $("#rating-result").html("<span class='text-danger'>Network/server error.</span>");
            }
        });
    });
});
    </script>
}
