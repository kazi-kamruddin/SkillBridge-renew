@model SkillBridge.Models.InteractionDetailsViewModel
@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Interaction Details";
}

<h2>Interaction Details</h2>

<p>Status: <strong>@Model.Status</strong></p>

<h3>Skill You Are Learning</h3>
<div class="skill-blocks mb-4">
    @for (int i = 0; i < Model.SkillRequested.Stages.Count; i++)
    {
        var stage = Model.SkillRequested.Stages[i];
        var session = Model.Sessions.FirstOrDefault(s => s.SkillId == Model.SkillRequested.Id && s.StageNumber == stage.StageNumber);
        bool canClick = (i == 0 || (Model.SkillRequested.Stages[i - 1].StageNumber <= session?.StageNumber && session?.LearnerConfirmed == true));

        @Html.BeginForm("CompleteStage", "Interactions", FormMethod.Post, new { style = "display:inline;" }) {
            @Html.AntiForgeryToken()
            @Html.Hidden("interactionId", Model.Id)
            @Html.Hidden("skillId", Model.SkillRequested.Id)
            @Html.Hidden("stageNumber", stage.StageNumber)
            @Html.Hidden("role", "Learner")

            <button type="submit" class="btn btn-sm @(session?.LearnerConfirmed == true ? "btn-success" : "btn-secondary")"
                    @(canClick ? "" : "disabled")>
                Stage @stage.StageNumber
            </button>
        }
    }
</div>

<h3>Skill You Are Teaching</h3>
<div class="skill-blocks mb-4">
    @for (int i = 0; i < Model.SkillOffered.Stages.Count; i++)
    {
        var stage = Model.SkillOffered.Stages[i];
        var session = Model.Sessions.FirstOrDefault(s => s.SkillId == Model.SkillOffered.Id && s.StageNumber == stage.StageNumber);
        bool canClick = (i == 0 || (Model.SkillOffered.Stages[i - 1].StageNumber <= session?.StageNumber && session?.MentorConfirmed == true));

        @Html.BeginForm("CompleteStage", "Interactions", FormMethod.Post, new { style = "display:inline;" }) {
            @Html.AntiForgeryToken()
            @Html.Hidden("interactionId", Model.Id)
            @Html.Hidden("skillId", Model.SkillOffered.Id)
            @Html.Hidden("stageNumber", stage.StageNumber)
            @Html.Hidden("role", "Mentor")

            <button type="submit" class="btn btn-sm @(session?.MentorConfirmed == true ? "btn-success" : "btn-secondary")"
                    @(canClick ? "" : "disabled")>
                Stage @stage.StageNumber
            </button>
        }
    }
</div>

@if (Model.SkillRequested.Stages.All(s => Model.Sessions.Any(sess => sess.SkillId == Model.SkillRequested.Id && sess.LearnerConfirmed)) &&
     Model.SkillOffered.Stages.All(s => Model.Sessions.Any(sess => sess.SkillId == Model.SkillOffered.Id && sess.MentorConfirmed)))
{
    @Html.BeginForm("CompleteInteraction", "Interactions", FormMethod.Post) {
        @Html.AntiForgeryToken()
        <button type="submit" class="btn btn-primary">Mark Interaction Completed & Rate</button>
    }
}
